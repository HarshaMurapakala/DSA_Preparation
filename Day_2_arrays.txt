
Find all anagrams of a string

Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.



SOlution:

mine:

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> result = new ArrayList<Integer>();
        int a= s.length();
        int b= p.length();
        boolean output;
        
        
        String temp="";
        
        char list1[]= s.toCharArray();
        char list2[]= p.toCharArray();
        
        if(b>a){
                return result;
        }
          
        if(a>8 && b>1){
        
        for(int i=0; i<a-b; i++)
        {

            temp= s.substring(i,i+b);
            
            System.out.println(temp);
            output= isAnagram(temp, b, list2);
                
            if(output)
                result.add(i);
            
            
        }
            
        }
        
        
        if(a<5 || a<9){
            
             for(int i=0; i<a-b+1; i++)
        {

            temp= s.substring(i,i+b);
            
            System.out.println(temp);
            output= isAnagram(temp, b, list2);
                
            if(output)
                result.add(i);
            
            
        }
            
        }
        
        if(b<2){
            
                  for(int i=0; i<a; i++)
        {

            temp= s.substring(i,i+b);
            
            System.out.println(temp);
            output= isAnagram(temp, b, list2);
                
            if(output)
                result.add(i);
            
            
        }
            
        }
        return result;
        
    }
    
    
    public boolean isAnagram(String find, int b, char[] list2){
        
        char list1[]= find.toCharArray();
        Arrays.sort(list1);
        Arrays.sort(list2);
        
        if(Arrays.equals(list1,list2))
            return true;
        else
           return false;
    }
}


it failed

-----------------------------------------

solution:

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        int[] map = new int[26];
        List<Integer> result = new ArrayList<>();
        
        for(int i=0;i<p.length();i++){
            map[p.charAt(i) - 'a']++;
        }
    
        int windowStart = 0;
        int windowEnd = 0;
        while(windowEnd<s.length()){
		// valid anagram
            if(map[s.charAt(windowEnd) - 'a'] > 0){
                map[s.charAt(windowEnd++) - 'a']--;
			// window size equal to size of P
                if(windowEnd-windowStart ==  p.length()){                    
                    result.add(windowStart);
                }
            }
			// window is of size 0
            else if(windowStart == windowEnd){
                windowStart ++;
                windowEnd ++;
            }
			// decrease window size
            else{
                map[s.charAt(windowStart++) - 'a']++;
            }      
        }
        return result;
    }
}

---------------------------------------------