K-diff pairs in a array

Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:

0 <= i < j < nums.length
|nums[i] - nums[j]| == k
Notice that |val| denotes the absolute value of val.

 

Example 1:

Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.
Example 2:

Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
Example 3:

Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).
 

Constraints:

1 <= nums.length <= 104
-107 <= nums[i] <= 107
0 <= k <= 107

mysolution:
didnt work 

class Solution {
    public int findPairs(int[] nums, int k) {
        int count=0;
        
        if(k!=0)
        {
        HashSet<Integer> temp = new HashSet<>();
        
        for(int i=0; i<nums.length; i++)
        {
            temp.add(nums[i]);
        }
        
        System.out.println(temp);
        
        List<Integer> x = new ArrayList<Integer>(temp);
        
        for(int i=0; i<x.size(); i++)
        {
            for(int j=i+1; j< x.size(); j++)
            {
                if(x.get(j)-x.get(i)==k || x.get(j)-x.get(i)== -k)
                    count++;
            }
        }
        
    
            
        }
        
        else{
        
            for(int p=0; p<nums.length; p++){
                for(int q=p+1; q<nums.length; q++)
                {
                    if(nums[p]==nums[q])
                        count ++;
                }
            }
            
            if(count>= nums.length)
                count=1;
        }
        
        return count;
        
    }
}




solution:

class Solution {
 	public int findPairs(int[] nums, int k) {
 		Set<Integer> uniquePair = new HashSet();
 		Arrays.sort(nums);
 		int n = nums.length;

 		for (int i = 0; i < n - 1; i++)
 			if (Arrays.binarySearch(nums, i + 1, n, nums[i] + k) > 0)
 				uniquePair.add(nums[i]);

 		return uniquePair.size();
 	}
 }


sol 2:

class Solution {
    public int findPairs(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int num : nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int count = 0;
        for(int x : map.keySet()){
            if(k > 0 && map.containsKey(x + k) || k == 0 && map.get(x) > 1) count++;
        }
        return count;
    }
}