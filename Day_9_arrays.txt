567. Permutation in string

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.


soluition:

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int len1 = s1.length(), len2 = s2.length();
        // corner case
        if (len1 > len2) return false;
        int[] count = new int[26];
        // initialize the count for each unique character
        for (char c : s1.toCharArray()) {
            count[c - 'a'] ++;
        }
        // initialize the sliding window with static size len1
        int i = 0, j = 0, counter = len1;
        while (j < len1) {
            if (count[s2.charAt(j++) - 'a']-- > 0) {
                counter --;
            }
        }
        while (j < len2 && counter != 0) {
            if (count[s2.charAt(i++) - 'a']++ >= 0) counter ++;
            if (count[s2.charAt(j++) - 'a']-- > 0) counter --;
        }
        return counter == 0;
    }
}